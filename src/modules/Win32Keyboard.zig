const std = @import("std");
const c = @import("win32").everything;
const core = @import("core");
const context = @import("context.zig");
const errors = core.errors;

const utf16ToUtf8 = std.unicode.utf16LeToUtf8AllocZ;

const KeyboardHandle = @import("KeyboardHandle.zig");
const EnumArray = std.EnumArray;
const Win32Keyboard = @This();

const instance = &context.instance;
pub const map = EnumArray(Scancode, KeyboardHandle.Key).init(.{
    .escape = .escape,
    .@"1" = .@"1",
    .@"2" = .@"2",
    .@"3" = .@"3",
    .@"4" = .@"4",
    .@"5" = .@"5",
    .@"6" = .@"6",
    .@"7" = .@"7",
    .@"8" = .@"8",
    .@"9" = .@"9",
    .@"0" = .@"0",
    .minus = .minus,
    .equals = .equals,
    .backspace = .backspace,
    .tab = .tab,
    .q = .q,
    .w = .w,
    .e = .e,
    .r = .r,
    .t = .t,
    .y = .y,
    .u = .u,
    .i = .i,
    .o = .o,
    .p = .p,
    .bracket_left = .bracket_left,
    .bracket_right = .bracket_right,
    .enter = .enter,
    .control_left = .control_left,
    .a = .a,
    .s = .s,
    .d = .d,
    .f = .f,
    .g = .g,
    .h = .h,
    .j = .j,
    .k = .k,
    .l = .l,
    .semicolon = .semicolon,
    .apostrophe = .apostrophe,
    .grave = .grave,
    .shift_left = .shift_left,
    .backslash = .backslash,
    .z = .z,
    .x = .x,
    .c = .c,
    .v = .v,
    .b = .b,
    .n = .n,
    .m = .m,
    .comma = .comma,
    .period = .period,
    .slash = .slash,
    .shift_right = .shift_right,
    .numpad_multiply = .numpad_multiply,
    .alt_left = .alt_left,
    .space = .space,
    .caps_lock = .caps_lock,
    .f1 = .f1,
    .f2 = .f2,
    .f3 = .f3,
    .f4 = .f4,
    .f5 = .f5,
    .f6 = .f6,
    .f7 = .f7,
    .f8 = .f8,
    .f9 = .f9,
    .f10 = .f10,
    .num_lock = .num_lock,
    .scroll_lock = .scroll_lock,
    .numpad_7 = .numpad_7,
    .numpad_8 = .numpad_8,
    .numpad_9 = .numpad_9,
    .numpad_minus = .numpad_minus,
    .numpad_4 = .numpad_4,
    .numpad_5 = .numpad_5,
    .numpad_6 = .numpad_6,
    .numpad_plus = .numpad_plus,
    .numpad_1 = .numpad_1,
    .numpad_2 = .numpad_2,
    .numpad_3 = .numpad_3,
    .numpad_0 = .numpad_0,
    .numpad_period = .numpad_period,
    .alt_print_screen = .alt_print_screen,
    .bracket_angle = .bracket_angle,
    .f11 = .f11,
    .f12 = .f12,
    .oem_1 = .oem_1,
    .oem_2 = .oem_2,
    .oem_3 = .oem_3,
    .erase_eof = .erase_eof,
    .oem_4 = .oem_4,
    .oem_5 = .oem_5,
    .zoom = .zoom,
    .help = .help,
    .f13 = .f13,
    .f14 = .f14,
    .f15 = .f15,
    .f16 = .f16,
    .f17 = .f17,
    .f18 = .f18,
    .f19 = .f19,
    .f20 = .f20,
    .f21 = .f21,
    .f22 = .f22,
    .f23 = .f23,
    .oem_6 = .oem_6,
    .katakana = .katakana,
    .oem_7 = .oem_7,
    .f24 = .f24,
    .sbcschar = .sbcschar,
    .convert = .convert,
    .nonconvert = .nonconvert,
    .media_previous = .media_previous,
    .media_next = .media_next,
    .numpad_enter = .numpad_enter,
    .control_right = .control_right,
    .volume_mute = .volume_mute,
    .launch_app2 = .launch_app2,
    .media_play = .media_play,
    .media_stop = .media_stop,
    .volume_down = .volume_down,
    .volume_up = .volume_up,
    .browser_home = .browser_home,
    .numpad_divide = .numpad_divide,
    .print_screen = .print_screen,
    .alt_right = .alt_right,
    .cancel = .cancel,
    .home = .home,
    .arrow_up = .arrow_up,
    .page_up = .page_up,
    .arrow_left = .arrow_left,
    .arrow_right = .arrow_right,
    .end = .end,
    .arrow_down = .arrow_down,
    .page_down = .page_down,
    .insert = .insert,
    .delete = .delete,
    .meta_left = .meta_left,
    .meta_right = .meta_right,
    .application = .application,
    .power = .power,
    .sleep = .sleep,
    .wake = .wake,
    .browser_search = .browser_search,
    .browser_favorites = .browser_favorites,
    .browser_refresh = .browser_refresh,
    .browser_stop = .browser_stop,
    .browser_forward = .browser_forward,
    .browser_back = .browser_back,
    .launch_app1 = .launch_app1,
    .launch_email = .launch_email,
    .launch_media = .launch_media,
    .pause = .pause,
});

/// Native handle to a keyboard device, if null it will not filter for any specific device
handle: ?c.HANDLE = null,

pub fn init() KeyboardHandle.Error!void {
    var dev: c.RAWINPUTDEVICE = std.mem.zeroes(c.RAWINPUTDEVICE);
    dev.usUsagePage = 1;
    dev.usUsage = 6; // Keyboard
    dev.dwFlags = .{
        .EXCLUDE = 1,
        .PAGEONLY = 1,
        .DEVNOTIFY = 1,
    };
    dev.hwndTarget = null;

    try errors.throwIfZero(
        c.RegisterRawInputDevices(@ptrCast(&dev), 1, @sizeOf(c.RAWINPUTDEVICE)),
        KeyboardHandle.Error.FailedToInitialize,
        "Failed to register win32 raw input device",
    );
}

pub const Scancode = enum(u32) {
    escape = 0x01,
    @"1" = 0x02,
    @"2" = 0x03,
    @"3" = 0x04,
    @"4" = 0x05,
    @"5" = 0x06,
    @"6" = 0x07,
    @"7" = 0x08,
    @"8" = 0x09,
    @"9" = 0x0A,
    @"0" = 0x0B,
    minus = 0x0C,
    equals = 0x0D,
    backspace = 0x0E,
    tab = 0x0F,
    q = 0x10,
    w = 0x11,
    e = 0x12,
    r = 0x13,
    t = 0x14,
    y = 0x15,
    u = 0x16,
    i = 0x17,
    o = 0x18,
    p = 0x19,
    bracket_left = 0x1A,
    bracket_right = 0x1B,
    enter = 0x1C,
    control_left = 0x1D,
    a = 0x1E,
    s = 0x1F,
    d = 0x20,
    f = 0x21,
    g = 0x22,
    h = 0x23,
    j = 0x24,
    k = 0x25,
    l = 0x26,
    semicolon = 0x27,
    apostrophe = 0x28,
    grave = 0x29,
    shift_left = 0x2A,
    backslash = 0x2B,
    z = 0x2C,
    x = 0x2D,
    c = 0x2E,
    v = 0x2F,
    b = 0x30,
    n = 0x31,
    m = 0x32,
    comma = 0x33,
    period = 0x34,
    slash = 0x35,
    shift_right = 0x36,
    numpad_multiply = 0x37,
    alt_left = 0x38,
    space = 0x39,
    caps_lock = 0x3A,
    f1 = 0x3B,
    f2 = 0x3C,
    f3 = 0x3D,
    f4 = 0x3E,
    f5 = 0x3F,
    f6 = 0x40,
    f7 = 0x41,
    f8 = 0x42,
    f9 = 0x43,
    f10 = 0x44,
    num_lock = 0x45,
    scroll_lock = 0x46,
    numpad_7 = 0x47,
    numpad_8 = 0x48,
    numpad_9 = 0x49,
    numpad_minus = 0x4A,
    numpad_4 = 0x4B,
    numpad_5 = 0x4C,
    numpad_6 = 0x4D,
    numpad_plus = 0x4E,
    numpad_1 = 0x4F,
    numpad_2 = 0x50,
    numpad_3 = 0x51,
    numpad_0 = 0x52,
    numpad_period = 0x53,
    alt_print_screen = 0x54, // Alt + print screen. MapVirtualKeyEx( VK_SNAPSHOT, MAPVK_VK_TO_VSC_EX, 0 ) returns scancode 0x54.
    bracket_angle = 0x56, // Key between the left shift and Z.
    f11 = 0x57,
    f12 = 0x58,
    oem_1 = 0x5a, // VK_OEM_WSCTRL
    oem_2 = 0x5b, // VK_OEM_FINISH
    oem_3 = 0x5c, // VK_OEM_JUMP
    erase_eof = 0x5d,
    oem_4 = 0x5e, // VK_OEM_BACKTAB
    oem_5 = 0x5f, // VK_OEM_AUTO
    zoom = 0x62,
    help = 0x63,
    f13 = 0x64,
    f14 = 0x65,
    f15 = 0x66,
    f16 = 0x67,
    f17 = 0x68,
    f18 = 0x69,
    f19 = 0x6a,
    f20 = 0x6b,
    f21 = 0x6c,
    f22 = 0x6d,
    f23 = 0x6e,
    oem_6 = 0x6f, // VK_OEM_PA3
    katakana = 0x70,
    oem_7 = 0x71, // VK_OEM_RESET
    f24 = 0x76,
    sbcschar = 0x77,
    convert = 0x79,
    nonconvert = 0x7B, // VK_OEM_PA1
    media_previous = 0xE010,
    media_next = 0xE019,
    numpad_enter = 0xE01C,
    control_right = 0xE01D,
    volume_mute = 0xE020,
    launch_app2 = 0xE021,
    media_play = 0xE022,
    media_stop = 0xE024,
    volume_down = 0xE02E,
    volume_up = 0xE030,
    browser_home = 0xE032,
    numpad_divide = 0xE035,
    print_screen = 0xE037,
    alt_right = 0xE038,
    cancel = 0xE046, // CTRL + Pause
    home = 0xE047,
    arrow_up = 0xE048,
    page_up = 0xE049,
    arrow_left = 0xE04B,
    arrow_right = 0xE04D,
    end = 0xE04F,
    arrow_down = 0xE050,
    page_down = 0xE051,
    insert = 0xE052,
    delete = 0xE053,
    meta_left = 0xE05B,
    meta_right = 0xE05C,
    application = 0xE05D,
    power = 0xE05E,
    sleep = 0xE05F,
    wake = 0xE063,
    browser_search = 0xE065,
    browser_favorites = 0xE066,
    browser_refresh = 0xE067,
    browser_stop = 0xE068,
    browser_forward = 0xE069,
    browser_back = 0xE06A,
    launch_app1 = 0xE06B,
    launch_email = 0xE06C,
    launch_media = 0xE06D,
    pause = 0xE11D45,
};
