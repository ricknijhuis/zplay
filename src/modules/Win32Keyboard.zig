const std = @import("std");
const c = @import("win32").everything;
const core = @import("core");
const context = @import("context.zig");
const errors = core.errors;

const utf16ToUtf8 = std.unicode.utf16LeToUtf8AllocZ;

const KeyboardHandle = @import("KeyboardHandle.zig");
const EnumArray = std.EnumArray;
const Win32Keyboard = @This();

const instance = &context.instance;
const map = EnumArray(KeyboardHandle.Key, u32, .{
    .escape = Scancode.sc_escape,
    .@"1" = Scancode.sc_1,
    .@"2" = Scancode.sc_2,
    .@"3" = Scancode.sc_3,
    .@"4" = Scancode.sc_4,
    .@"5" = Scancode.sc_5,
    .@"6" = Scancode.sc_6,
    .@"7" = Scancode.sc_7,
    .@"8" = Scancode.sc_8,
    .@"9" = Scancode.sc_9,
    .@"0" = Scancode.sc_0,
    .minus = Scancode.sc_minus,
    .equals = Scancode.sc_equals,
    .backspace = Scancode.sc_backspace,
    .tab = Scancode.sc_tab,
    .q = Scancode.sc_q,
    .w = Scancode.sc_w,
    .e = Scancode.sc_e,
    .r = Scancode.sc_r,
    .t = Scancode.sc_t,
    .y = Scancode.sc_y,
    .u = Scancode.sc_u,
    .i = Scancode.sc_i,
    .o = Scancode.sc_o,
    .p = Scancode.sc_p,
    .bracket_left = Scancode.sc_bracketLeft,
    .bracket_right = Scancode.sc_bracketRight,
    .enter = Scancode.sc_enter,
    .control_left = Scancode.sc_controlLeft,
    .a = Scancode.sc_a,
    .s = Scancode.sc_s,
    .d = Scancode.sc_d,
    .f = Scancode.sc_f,
    .g = Scancode.sc_g,
    .h = Scancode.sc_h,
    .j = Scancode.sc_j,
    .k = Scancode.sc_k,
    .l = Scancode.sc_l,
    .semicolon = Scancode.sc_semicolon,
    .apostrophe = Scancode.sc_apostrophe,
    .grave = Scancode.sc_grave,
    .shift_left = Scancode.sc_shiftLeft,
    .backslash = Scancode.sc_backslash,
    .z = Scancode.sc_z,
    .x = Scancode.sc_x,
    .c = Scancode.sc_c,
    .v = Scancode.sc_v,
    .b = Scancode.sc_b,
    .n = Scancode.sc_n,
    .m = Scancode.sc_m,
    .comma = Scancode.sc_comma,
    .period = Scancode.sc_period,
    .slash = Scancode.sc_slash,
    .shift_right = Scancode.sc_shift_right,
    .numpad_multiply = Scancode.sc_numpad_multiply,
    .alt_left = Scancode.sc_alt_left,
    .space = Scancode.sc_space,
    .caps_lock = Scancode.sc_caps_lock,
    .f1 = Scancode.sc_f1,
    .f2 = Scancode.sc_f2,
    .f3 = Scancode.sc_f3,
    .f4 = Scancode.sc_f4,
    .f5 = Scancode.sc_f5,
    .f6 = Scancode.sc_f6,
    .f7 = Scancode.sc_f7,
    .f8 = Scancode.sc_f8,
    .f9 = Scancode.sc_f9,
    .f10 = Scancode.sc_f10,
    .num_lock = Scancode.sc_num_lock,
    .scroll_lock = Scancode.sc_scroll_lock,
    .numpad_7 = Scancode.sc_numpad_7,
    .numpad_8 = Scancode.sc_numpad_8,
    .numpad_9 = Scancode.sc_numpad_9,
    .numpad_minus = Scancode.sc_numpad_minus,
    .numpad_4 = Scancode.sc_numpad_4,
    .numpad_5 = Scancode.sc_numpad_5,
    .numpad_6 = Scancode.sc_numpad_6,
    .numpad_plus = Scancode.sc_numpad_plus,
    .numpad_1 = Scancode.sc_numpad_1,
    .numpad_2 = Scancode.sc_numpad_2,
    .numpad_3 = Scancode.sc_numpad_3,
    .numpad_0 = Scancode.sc_numpad_0,
    .numpad_period = Scancode.sc_numpad_period,
    .alt_print_screen = Scancode.sc_alt_print_screen,
    .bracket_angle = Scancode.sc_bracket_angle,
    .f11 = Scancode.sc_f11,
    .f12 = Scancode.sc_f12,
    .oem_1 = Scancode.sc_oem_1,
    .oem_2 = Scancode.sc_oem_2,
    .oem_3 = Scancode.sc_oem_3,
    .erase_eof = Scancode.sc_erase_eof,
    .oem_4 = Scancode.sc_oem_4,
    .oem_5 = Scancode.sc_oem_5,
    .zoom = Scancode.sc_zoom,
    .help = Scancode.sc_help,
    .f13 = Scancode.sc_f13,
    .f14 = Scancode.sc_f14,
    .f15 = Scancode.sc_f15,
    .f16 = Scancode.sc_f16,
    .f17 = Scancode.sc_f17,
    .f18 = Scancode.sc_f18,
    .f19 = Scancode.sc_f19,
    .f20 = Scancode.sc_f20,
    .f21 = Scancode.sc_f21,
    .f22 = Scancode.sc_f22,
    .f23 = Scancode.sc_f23,
    .oem_6 = Scancode.sc_oem_6,
    .katakana = Scancode.sc_katakana,
    .oem_7 = Scancode.sc_oem_7,
    .f24 = Scancode.sc_f24,
    .sbcschar = Scancode.sc_sbcschar,
    .convert = Scancode.sc_convert,
    .nonconvert = Scancode.sc_nonconvert,
    .media_previous = Scancode.sc_media_previous,
    .media_next = Scancode.sc_media_next,
    .numpad_enter = Scancode.sc_numpad_enter,
    .control_right = Scancode.sc_control_right,
    .volume_mute = Scancode.sc_volume_mute,
    .launch_app2 = Scancode.sc_launch_app2,
    .media_play = Scancode.sc_media_play,
    .media_stop = Scancode.sc_media_stop,
    .volume_down = Scancode.sc_volume_down,
    .volume_up = Scancode.sc_volume_up,
    .browser_home = Scancode.sc_browser_home,
    .numpad_divide = Scancode.sc_numpad_divide,
    .print_screen = Scancode.sc_print_screen,
    .alt_right = Scancode.sc_alt_right,
    .cancel = Scancode.sc_cancel,
    .home = Scancode.sc_home,
    .arrow_up = Scancode.sc_arrow_up,
    .page_up = Scancode.sc_page_up,
    .arrow_left = Scancode.sc_arrow_left,
    .arrow_right = Scancode.sc_arrow_right,
    .end = Scancode.sc_end,
    .arrow_down = Scancode.sc_arrow_down,
    .page_down = Scancode.sc_page_down,
    .insert = Scancode.sc_insert,
    .delete = Scancode.sc_delete,
    .meta_left = Scancode.sc_meta_left,
    .meta_right = Scancode.sc_meta_right,
    .application = Scancode.sc_application,
    .power = Scancode.sc_power,
    .sleep = Scancode.sc_sleep,
    .wake = Scancode.sc_wake,
    .browser_search = Scancode.sc_browser_search,
    .browser_favorites = Scancode.sc_browser_favorites,
    .browser_refresh = Scancode.sc_browser_refresh,
    .browser_stop = Scancode.sc_browser_stop,
    .browser_forward = Scancode.sc_browser_forward,
    .browser_back = Scancode.sc_browser_back,
    .launch_app1 = Scancode.sc_launch_app1,
    .launch_email = Scancode.sc_launch_email,
    .launch_media = Scancode.sc_launch_media,
    .pause = Scancode.sc_pause,
});

/// Native handle to a keyboard device, if null it will not filter for any specific device
handle: ?c.HANDLE = null,

pub fn init() KeyboardHandle.Error!void {
    var dev: c.RAWINPUTDEVICE = std.mem.zeroes(c.RAWINPUTDEVICE);
    dev.usUsagePage = 1;
    dev.usUsage = 6; // Keyboard
    dev.dwFlags = .{
        .EXCLUDE = 1,
        .PAGEONLY = 1,
        .DEVNOTIFY = 1,
    };
    dev.hwndTarget = null;

    try errors.throwIfZero(
        c.RegisterRawInputDevices(@ptrCast(&dev), 1, @sizeOf(c.RAWINPUTDEVICE)),
        KeyboardHandle.Error.FailedToInitialize,
        "Failed to register win32 raw input device",
    );
}

pub const Scancode = enum(u32) {
    sc_escape = 0x01,
    sc_1 = 0x02,
    sc_2 = 0x03,
    sc_3 = 0x04,
    sc_4 = 0x05,
    sc_5 = 0x06,
    sc_6 = 0x07,
    sc_7 = 0x08,
    sc_8 = 0x09,
    sc_9 = 0x0A,
    sc_0 = 0x0B,
    sc_minus = 0x0C,
    sc_equals = 0x0D,
    sc_backspace = 0x0E,
    sc_tab = 0x0F,
    sc_q = 0x10,
    sc_w = 0x11,
    sc_e = 0x12,
    sc_r = 0x13,
    sc_t = 0x14,
    sc_y = 0x15,
    sc_u = 0x16,
    sc_i = 0x17,
    sc_o = 0x18,
    sc_p = 0x19,
    sc_bracketLeft = 0x1A,
    sc_bracketRight = 0x1B,
    sc_enter = 0x1C,
    sc_controlLeft = 0x1D,
    sc_a = 0x1E,
    sc_s = 0x1F,
    sc_d = 0x20,
    sc_f = 0x21,
    sc_g = 0x22,
    sc_h = 0x23,
    sc_j = 0x24,
    sc_k = 0x25,
    sc_l = 0x26,
    sc_semicolon = 0x27,
    sc_apostrophe = 0x28,
    sc_grave = 0x29,
    sc_shiftLeft = 0x2A,
    sc_backslash = 0x2B,
    sc_z = 0x2C,
    sc_x = 0x2D,
    sc_c = 0x2E,
    sc_v = 0x2F,
    sc_b = 0x30,
    sc_n = 0x31,
    sc_m = 0x32,
    sc_comma = 0x33,
    sc_preiod = 0x34,
    sc_slash = 0x35,
    sc_shiftRight = 0x36,
    sc_numpad_multiply = 0x37,
    sc_altLeft = 0x38,
    sc_space = 0x39,
    sc_capsLock = 0x3A,
    sc_f1 = 0x3B,
    sc_f2 = 0x3C,
    sc_f3 = 0x3D,
    sc_f4 = 0x3E,
    sc_f5 = 0x3F,
    sc_f6 = 0x40,
    sc_f7 = 0x41,
    sc_f8 = 0x42,
    sc_f9 = 0x43,
    sc_f10 = 0x44,
    sc_num_lock = 0x45,
    sc_scroll_lock = 0x46,
    sc_numpad_7 = 0x47,
    sc_numpad_8 = 0x48,
    sc_numpad_9 = 0x49,
    sc_numpad_minus = 0x4A,
    sc_numpad_4 = 0x4B,
    sc_numpad_5 = 0x4C,
    sc_numpad_6 = 0x4D,
    sc_numpad_plus = 0x4E,
    sc_numpad_1 = 0x4F,
    sc_numpad_2 = 0x50,
    sc_numpad_3 = 0x51,
    sc_numpad_0 = 0x52,
    sc_numpad_period = 0x53,
    sc_alt_print_screen = 0x54, // Alt + print screen. MapVirtualKeyEx( VK_SNAPSHOT, MAPVK_VK_TO_VSC_EX, 0 ) returns scancode 0x54.
    sc_bracket_angle = 0x56, // Key between the left shift and Z.
    sc_f11 = 0x57,
    sc_f12 = 0x58,
    sc_oem_1 = 0x5a, // VK_OEM_WSCTRL
    sc_oem_2 = 0x5b, // VK_OEM_FINISH
    sc_oem_3 = 0x5c, // VK_OEM_JUMP
    sc_erase_EOF = 0x5d,
    sc_oem_4 = 0x5e, // VK_OEM_BACKTAB
    sc_oem_5 = 0x5f, // VK_OEM_AUTO
    sc_zoom = 0x62,
    sc_help = 0x63,
    sc_f13 = 0x64,
    sc_f14 = 0x65,
    sc_f15 = 0x66,
    sc_f16 = 0x67,
    sc_f17 = 0x68,
    sc_f18 = 0x69,
    sc_f19 = 0x6a,
    sc_f20 = 0x6b,
    sc_f21 = 0x6c,
    sc_f22 = 0x6d,
    sc_f23 = 0x6e,
    sc_oem_6 = 0x6f, // VK_OEM_PA3
    sc_katakana = 0x70,
    sc_oem_7 = 0x71, // VK_OEM_RESET
    sc_f24 = 0x76,
    sc_sbcschar = 0x77,
    sc_convert = 0x79,
    sc_nonconvert = 0x7B, // VK_OEM_PA1
    sc_media_previous = 0xE010,
    sc_media_next = 0xE019,
    sc_numpad_enter = 0xE01C,
    sc_controlRight = 0xE01D,
    sc_volume_mute = 0xE020,
    sc_launch_app2 = 0xE021,
    sc_media_play = 0xE022,
    sc_media_stop = 0xE024,
    sc_volume_down = 0xE02E,
    sc_volume_up = 0xE030,
    sc_browser_home = 0xE032,
    sc_numpad_divide = 0xE035,
    sc_printScreen = 0xE037,
    sc_altRight = 0xE038,
    sc_cancel = 0xE046, // CTRL + Pause
    sc_home = 0xE047,
    sc_arrowUp = 0xE048,
    sc_pageUp = 0xE049,
    sc_arrowLeft = 0xE04B,
    sc_arrowRight = 0xE04D,
    sc_end = 0xE04F,
    sc_arrow_down = 0xE050,
    sc_page_down = 0xE051,
    sc_insert = 0xE052,
    sc_delete = 0xE053,
    sc_meta_left = 0xE05B,
    sc_meta_right = 0xE05C,
    sc_application = 0xE05D,
    sc_power = 0xE05E,
    sc_sleep = 0xE05F,
    sc_wake = 0xE063,
    sc_browser_search = 0xE065,
    sc_browser_favorites = 0xE066,
    sc_browser_refresh = 0xE067,
    sc_browser_stop = 0xE068,
    sc_browser_forward = 0xE069,
    sc_browser_back = 0xE06A,
    sc_launch_app1 = 0xE06B,
    sc_launch_email = 0xE06C,
    sc_launch_media = 0xE06D,
    sc_pause = 0xE11D45,
};
